import jwt
import os
import boto3
import datetime

sm_client = boto3.client('secretsmanager')

ALGORITHM = 'HS256'
JWT_SECRET_NAME = os.environ['JWT_SECRET_NAME']
JWT_SECRET = sm_client.get_secret_value(SecretId=JWT_SECRET_NAME)['SecretString']


class JwtManager:

    @staticmethod
    def create_token(payload , token_duration=15):
        duration = datetime.timedelta(minutes=token_duration)
        expiration_time = datetime.datetime.utcnow() + duration
        expiration_timestamp = datetime.datetime.timestamp(expiration_time)

        jwt_payload = {
            "payload": payload,
            "expires_at": expiration_timestamp
        }

        return jwt.encode(jwt_payload, JWT_SECRET, algorithm=ALGORITHM).decode()

    @staticmethod
    def decode_token(token):
        payload = jwt.decode(token, JWT_SECRET, algorithms=[ALGORITHM])

        expiration_timestamp = payload['expires_at']
        now = datetime.datetime.utcnow()
        now_timestamp = datetime.datetime.timestamp(now)

        if now_timestamp > expiration_timestamp:
            raise ValueError("Token expired")

        return payload['payload']
